import { UserKeyDefinition } from "@bitwarden/common/platform/state";
import { Constraints } from "@bitwarden/common/tools/types";

import { Randomizer } from "../abstractions";
import { PolicyConfiguration } from "../types";

import { CredentialCategory } from "./credential-category";
import { CredentialGenerator } from "./credential-generator";

export type CredentialGeneratorConfiguration<Settings, Policy> = {
  /** Category describing usage of the credential generated by this configuration
   */
  category: CredentialCategory;

  /** An algorithm that generates credentials when ran. */
  engine: {
    /** Factory for the generator
     */
    // FIXME: note that this erases the engine's type so that credentials are
    // generated uniformly. This property needs to be maintained for
    // the credential generator, but engine configurations should return
    // the underlying type. `create` may be able to do double-duty w/ an
    // engine definition if `CredentialGenerator` can be made covariant.
    create: (randomizer: Randomizer) => CredentialGenerator<Settings>;
  };
  /** Defines the stored parameters for credential generation */
  settings: {
    /** value used when an account's settings haven't been initialized */
    initial: Readonly<Partial<Settings>>;

    constraints: Constraints<Settings>;

    /** storage location for account-global settings */
    account: UserKeyDefinition<Settings>;
  };

  /** defines how to construct policy for this settings instance */
  policy: PolicyConfiguration<Policy, Settings>;
};
